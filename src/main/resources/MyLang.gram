lang -> expr+
expr -> assign_expr|cond_expr|while_expr|input_expr|output_expr|lists_expr|return_expr|method_call

assign_expr -> var ASSING_OP value_expr END_LINE
value_expr -> VAR|DIGIT|arithmetic_expr

arithmetic_expr -> OPEN_BRACKET? value_expr (op arithmetic_expr)* CLOSE_BRACKET?
op -> PLUS_MINUS | MUL_DIV

body -> OPEN_BRACKET expr+ CLOSE_BRACKET

list_expr -> LIST value_expr
method_call -> VAR mathod value_expr END_LINE

logical_head -> OPEN_BRACE logical_expr CLOSE_BRACE
logical_expr -> value_expr LOGIC_OP value_expr

cond_expr -> cond_head body
cond_head -> IF_KW logical_head

while_expr -> while_head body
while_head -> WHILE_KW logical_head

arg_list -> value_expr (COMMA value_expr)*
method_call -> VAR method CLOSE_PARANTHESIS END_LINE



IF_KW -> if
WHILE_KW -> while
LIST ->list
ADD -> add
GET -> get
REMOVE -> remove
EMPTY -> empty
SIZE -> size
VAR -> ^[a-zA-Z]+
DIGIT -> ^(0|([1-9][0-9]*))
INPUT_OP -> >>
OUTPUT_OP -> <<
LOGIC_OP -> (==|>=|<=|>|<|!=)
ASSIGN_OP -> =
PLUS_MINUS -> +|-
MUL_DIV -> *|/
OPEN_BRACE -> {
CLOSE_BRACE -> }
OPEN_BRACKET -> (
CLOSE_BRACKET -> )
END_LINE -> ;
END -> end
UNCONDITIONAL_TRANSITION -> !
FALSE_TRANS -> !F